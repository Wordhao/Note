1.3  Maven 入门（中）


Maven核心概念： 仓库  依赖管理     POM  插件  生命周期

1.POM（Project Object Model）
  一个java项目所有的配置都放在POM文件中，大概有如下的行为：
*定义项目的类型、名字
*管理依赖关系
*定制插件的

1.1 Maven坐标
  <groupId>com.youkeda.course</groupId>
  <artifactId>app</artifactId>
  <packaging>jar</packaging>
  <version>1.0-SNAPSHOT</version>
这四个标签组成了Maven的坐标，Maven的坐标决定了这个Maven工程部
署后存在Maven仓库的文件位置，所以这个位置坐标信息是必须要指定的。

groupld

groupld就像一个文件夹一样，它的命名和Java的包比较一致，这里一般只用小写
的英文字母和字符. ,比如这里的com. youkeda.course。一般来说一 个公司会设置
自己的groupld,避免和其他公司重合，个人开发者也一样。

artifactld

artifactld有点像文件名一样，在一个groupld内，它应该是唯一的, 你不能使用中文
或者特殊字符，从规范上来说只能使用小写的英文字母  .   -   _     。 比如: 
app、member . shared这些都可以

packaging

Maven工程执行完后会把整个工程打包成packaging指定的
文件格式，默认情况下packaging的值是jar ,所以如果
pom. xm1文件中没有声明这个标签，那就是jar
packaging有如下的几种格式：
●jar
●war
●ear
●pom
多数情况下，我们使用的都是jar，其他格式我们在以后会
逐步运用到，这里有个概念就好。

version
version很有意思的，它基本上遵守了软件工程中对版本号的约定。
在Maven的世界里，会把一个工程分为两个状态,这也是软件工程里
最最常用的规范。
●SNAPSHOT
这个单词翻译过来的意思是快照，实际上代表了当前程序还处于不
稳定的阶段，随时可以再修改,所以在我们开发的时候我们会在版
本号后面加上SNAPSHOT关键字
●RELEASE
RELEASE和SNAPSHOT是对立面的，所以它代表的就是稳定，一
般我们正式发布的时候，都会把version改为RELEASE。当然你可
以以用特意的加上RELEASE ,因为只要不是SNAPSHOT，那就是
RELEASE

最后还有一个约定，那就是执行mvn package、mvn install 命令生
成的jar文件名是[artifactId]-[version].jar ，你可以看看刚才
的演示执行的target目录下是不是有一个
app-1.0.0-SNAPSHOT.jar文件

1.2 Maven属性配置
<properties>
    <java.version>1.8</java.version>
    <maven.compiler.source>${java.version}</maven.compiler.source>
    <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
    <maven.compiler.target>${java.version}</maven.compiler.target>
</properties>
首先他的格式是在properties标签内，这个是固定的格式。properties内的标签
可以自定义，但是一般来说只能是小写英文字母+  .  

当然默认也有一些公共参数是可以调整的，比如我们这里的
●java.version
代表设置一 个参数:  java.version, 它的值是1.8
●maven.compiler.source
这个参数是指定Maven编译时候源代码的JDK版本,
${java .version}这个值有点特殊,它是一个动态值，${key} 这
个语法会动态找到key这个参数配置的值，所以，上面的例子中
${java.version}的实际值是1.8
●project.build.sourceEncoding
这个参数指定的是.工程代码源文件的文件编码格式，一般情况下，我
们都设置成UTF-8 
●maven.compiler.target
这个参数作用是是按照这个值来进行编译源代码，比如这里的例子是
按照JDK1.8进行编译



