2.1  Java注解（Annotation）

Annotation（注解）

1.Target

java. lang. annotation.Target自身也是一个注解，它只有一个数组
属性，用于设定该注解的目标范围，比如说可以作用于类或者方法等。
因为是数组，所以可以同时设定多个范围
具体可以作用的类型配置在java. lang. annotation. ElementType枚举类中，
我们说几个常用的
●ElementType.TYPE  可以作用于类、接口类、枚举类上
●ElementType.FIELD  可以作用于类的属性上
●ElementType.METHOD  可以作用于类的方法上
●ElementType.PARAMETER  可以作用于类的参数

如果想要同时作用于类和方法上，那么你就可以：
@Target({ElementType.TYPE,ElementType.METHOD})  //逗号' , '分隔


2.Retention

java. lang. annotation. Retention自身也是一个注解, 它用于声明该
注解的生命周期，简单的来说就是在Java编译、运行的哪个环节有
效，它的值定义在java. lang. annotation. RetentionPolicy枚举类
中，有三个值可以选择。
1.SOURCE:也就是说是纯注释作用.
2.CLASS:也就是在编译阶段是有效的
3.RUNTIME:在运行时有效

@Retention(RetentionPolicy.RUNTIME)  这个代码表示的就是在运行期间有效

3.Document

java. lang. annotation. Documented自身也是一个注解，它的作用是
将注解中的元素包含到JavaDoc文档中，一般情况下，都会添加这个
注解的。

4.@interface

@interface就是声明当前的Java类型是Annotation,固定语法，就
是这样写就好

5.Annotation属性

String value() default "";
Annotation的属性有点像类的属性一样, 它约定了属性的类型(这个类
型是基础类型: String、 boolean、 int、 long), 和属性名称(默认名称
是value，在引用的时候可以省略)，default 代表的是默认值。
有了这个属性，我们就可以正式的引用一个Annotation啦，比如
import org.springframework.stereotype.Service;

@Service
public class Demo {

}

上面的@service也可以写成
import org.springframework.stereotype.Service;

@Service(value="Demo")
public class Demo {

}

value的默认属性名称是可以缩写的，所以上面的代码等同于
import org.springframework.stereotype.Service;

@Service("Demo")
public class Demo {

}

Annotation属性是可以有多个的，比如下面的一个注释类
@Target(ElementType.PARAMETER)
@Retention(RetentionPolicy.RUNTIME)
@Documented
public @interface RequestParam {

    @AliasFor("name")
    String value() default "";


    @AliasFor("value")
    String name() default "";


    boolean required() default true;

    String defaultValue() default ValueConstants.DEFAULT_NONE;
}
在属性的代码上，我们看到@AliasFor("name")这个是别名的意思，就
是说这个属性用这个别名也可以访问到，所以下面的代码是一样的意思 ：
@RequestParam("key")
@RequestParam(value="key")
@RequestParam(name="key")






