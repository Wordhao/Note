2.1 State/Mutation/Action

定义 Vuex Store

store只是一个空的对象，我们继续编写这个src/store/index.js
，后面就简称为 store了，说到store就是对应Vuex的store 文件。


State/Mutation/Action

State 的作用就是存储数据的，因为我们前面提到过 Vuex 是状态管理框架，
所以在Vuex 中 state表示数据在Vuex中的存储状态，
我们如果想要获取数据只能从 state 里获取，而且只能从state 里获取。

编写 state
export default new Vuex.Store({
  state: {
    count: 0
  }
});

Mutation
修改 State状态，State的数据是不能被直接修改的，你如果要更新State只能借助
于Mutation来完成。
Mutation 是一个函数，接收两个参数
*state  当前上下文的 state实例
*payload 接收外部传入的对象，需要和调用方约定好对象类型，也可以不传入参数
 load(state, payload) {}，
例：
export default new Vuex.Store({
  state: {
    count: 0
  },
  mutations: {
    increment(state) {
      state.count++;
    },
    decrement(state) {
      state.count--;
    }
  }
});


Action

Vuex 对数据管理的非常严格，除了只能通过 mutation 修改 state状态外，
还不允许外部调用 mutation 函数。
如果想要在vue 中修改 state 值，只能通过 Vuex 的Action 来触发 mutation 函数来执行修改。
例：
export default new Vuex.Store({
  state: {
    count: 0
  },
  actions: {
    increment: ({ commit }) => commit('increment'),
    decrement: ({ commit }) => commit('decrement')
  },
  mutations: {
    increment(state) {
      state.count++;
    },
    decrement(state) {
      state.count--;
    }
  }
});
action是一个函数，它接收两个参数：
*第一个参数是context 对象（Vuex的上下文值） context对象包含以下属性或方法
{
  state, // 等同于 `store.state`，若在模块中则为局部状态
    rootState, // 等同于 `store.state`，只存在于模块中，
    commit, // 等同于 `store.commit`
    dispatch, // 等同于 `store.dispatch`
    getters, // 等同于 `store.getters`
    rootGetters; // 等同于 `store.getters`，只存在于模块中
}
绝大多数情况下，我们只需要使用state、commit、dispatch这三个就可以，
由于context是一个JSON对象，所以我们可以使用 ES6 的解构方式来声明参数：
 increment: ({ commit }) => commit("increment")
还可以定义多个参数：
increment: ({ state,commit,dispatch }) => commit("increment")
*第二个参数是接收外部传递的参数
本例省略

commit
commit是个函数，它的作用就是把数据提交到 mutation 中，同样它也有两个参数
*第一个参数是 mutation的函数名称
*第二个参数是自定义的对象
actions: {
  increment: ({ commit }) => commit('increment');
}


运用 Vuex Store

获取 state 
通过 $store.state.count 来获取state 中的count属性值。和Vue的双向绑定不同，
state只支持单向绑定，当mutation 更新了state状态后，vue中的值也会自动更新，比如：
<template>
  <div>
    Clicked: {{ $store.state.count }} times
  </div>
</template>

我们可以借助Vuex的 mapState 这个函数，这个函数可以动态的将 state 和computed 绑定上
Counter.vue
<template>
  <div>
    Clicked: {{ count }} times
  </div>
</template>

<script>
  // 导入 mapState 函数
  import { mapState } from 'vuex';

  export default {
    computed: {
      ...mapState({
        // 箭头函数可使代码更简练
        count: state => state.count
      })
    }
  };
</script>

执行store 的action
<template>
  <div>
    Clicked: {{ count }} times
    <div>
      <button @click="increment">+</button>
      <button @click="decrement">-</button>
    </div>
  </div>
</template>

<script>
  // 导入 mapState mapActions 函数
  import { mapState, mapActions } from 'vuex';

  export default {
    computed: {
      ...mapState({
        count: state => state.count
      })
    },
    methods: { ...mapActions(['increment', 'decrement']) }
  };
</script>