emit

之前我们提到过，我们不能在子组件中直接修改父组件传来的prop数据。
这里我们可以通过自定义事件来完成这个任务。

自定义事件
现在我们用自定义事件“upVote”来实现点赞功能。
1.给子组件 Article.vue 绑定自定义事件：
在App.vue中用 v-on:upVote = "handleLikes" 给Article.vue绑定自定义事件：
<!-- 自定义事件 upVote，调用该事件时会执行 handleLikes 方法 -->
<article
  v-for="article in articleList"
  :key="article.title"
  :article="article"
  v-on:upVote="handleLikes"
></article>
2.在Article.vue中调用自定义事件"upVote"
<!-- 在 template 中直接调用自定义事件 upVote -->
<button @click="$emit('upVote')">点赞</button>

如果在点赞的同时还有其他要执行的代码可以这样写：
<button @click="childEvent">点赞</button>
methods: {
  childEvent: function() {
    // 调用自定义事件 upVote
    this.$emit('upVote');
    // do other things
  }
}

特别注意，这里出现了三个名称：
1.handleLikes：父组件中修改点赞数的方法；
2.upVote：自定义事件名；
3.childEvent：子组件中按钮点击时调用的方法。



自定义事件的参数

下面我们通过自定义事件的参数把数据从子组件传到父组件：
父组件App.vue中：
<!-- 自定义事件 upVote，调用该事件时会执行 handleLikes 方法 -->
<!-- 注意：我们接下来会在子组件里给 handleLikes 传参数 -->
<article
  v-for="article in articleList"
  :key="article.title"
  :article="article"
  v-on:upVote="handleLikes"
></article>

// 在 `methods` 对象中定义方法
methods: {
  handleLikes(article) {
    article.likes++
  }
}
注意，虽然这里handleLikes方法需要传入参数article，
但v-on:upVote="handleLikes"没有传入参数article。
在子组件Article.vue中调用自定义事件"upVote"时会把参数传入：
<button @click="childEvent">点赞</button>
methods: {
  childEvent: function() {
    // 调用自定义事件 upVote，这里的第二个参数最后会传到父组件中的 handleLikes 方法里
    this.$emit('upVote', this.article);
    // do other things
  }
}
$emit 的第一个参数是自定义事件的名称，它还可以有第二个、第三个参数，甚至更多的
参数，这些参数最终会成为自定义事件对应的那个方法的参数。


自定义事件中的双向绑定
在父组件App.vue中，用修饰符.sync完成count的“双向绑定”：
<MyCount class="count" :count.sync="count"></MyCount>
// 在 `methods` 对象中定义方法
data: function() {
  return {
    count: 0
  }
}
子组件MyCount.vue中用update:count的模式触发事件，把count+1赋值给count：
<div class="my-count">
  <button @click="$emit('update:count', count+1)">加一</button>
  {{ count }}
</div>

props: ['count'],

